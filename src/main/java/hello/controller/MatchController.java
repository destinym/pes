package hello.controller;

import hello.model.Match;
import hello.model.Season;
import hello.model.User;
import hello.repo.MatchRepository;
import hello.repo.SeasonRepository;
import hello.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import java.util.Optional;

/**
 * Created by mengliang on 2018/8/31.
 * Copyright (c) 2015å¹´ Vipshop Holdings Limited. All rights reserved.
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/match") // This means URL's start with /demo (after Application path)
public class MatchController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SeasonRepository seasonRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private MatchRepository matchRepository;


    private String url = "http://localhost:8080/season/top1?seasonId=";


    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Match> getAllMatch() {
        // This returns a JSON or XML with the users
        return matchRepository.findAll();
    }

    @GetMapping(path = "modify")
    public String modify(@RequestParam Integer matchId, Model model) {
        Optional<Match> matchOptional = matchRepository.findById(matchId);
        matchOptional.ifPresent(match -> {
            model.addAttribute("match", match);
        });
        return "match/modify";
    }

    @PostMapping(path = "modify")
    public ModelAndView modifySubmit(@ModelAttribute Match matchForm) {
        final int[] seasonId = {0};
        Optional<Match> matchOptional = matchRepository.findById(matchForm.getId());
        matchOptional.ifPresent(match -> {
            match.setHomeScore(matchForm.getHomeScore());
            match.setAwayScore(matchForm.getAwayScore());
            Optional<Season> seasonOptional = seasonRepository.findById(match.getSeasonId());
            seasonOptional.ifPresent(season -> {
                int left = season.getLeftMatch();
                if (!match.getFinish()) {
                    left -= 1;
                }
                if (left == 0) {
                    RestTemplate restTemplate = new RestTemplate();
                    Integer result = restTemplate.getForObject(url + season.getId(), Integer.class);
                    Optional<User> userOptional = userRepository.findById(result);
                    userOptional.ifPresent(user -> {
                        season.setWinnerUser(user);
                    });
                }
                season.setLeftMatch(left);
                seasonRepository.save(season);
            });
            match.setFinish(true);
            seasonId[0] = match.getSeasonId();
            matchRepository.save(match);
        });
        if (seasonId[0] == 0) {
            ModelAndView modelAndView = new ModelAndView("redirect:/season");
            return modelAndView;
        } else {
            ModelAndView modelAndView = new ModelAndView("redirect:/season/match?seasonId=" + seasonId[0]);
            return modelAndView;

        }
    }

}