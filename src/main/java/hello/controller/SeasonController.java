package hello.controller;

import hello.model.Match;
import hello.model.Season;
import hello.model.User;
import hello.model.UserScore;
import hello.repo.MatchRepository;
import hello.repo.SeasonRepository;
import hello.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Created by mengliang on 2018/8/31.
 * Copyright (c) 2015å¹´ Vipshop Holdings Limited. All rights reserved.
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/season") // This means URL's start with /demo (after Application path)
public class SeasonController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SeasonRepository seasonRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private MatchRepository matchRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public String addGet() {
        return "season/add";
    }

    @PostMapping(path = "/add", produces = "text/plain;charset=UTF-8") // Map ONLY GET Requests
    public ModelAndView addNewSeason(@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        Season season = seasonRepository.findFirstByOrderByIdDesc();
        if (season == null || season.getLeftMatch() == 0) {
            Iterable<User> useres = userRepository.findAll();
            List<User> userList = new ArrayList();
            for (User user : useres) {
                userList.add(user);
            }
            int total = calMathNum(userList.size());

            Season newSeason = new Season();
            newSeason.setName(name);
            newSeason.setTotalMatch(total);
            newSeason.setLeftMatch(total);
            newSeason.setWinnerUser(userList.get(0));
            Integer seasonId = seasonRepository.save(newSeason).getId();


            for (int i = 0; i < userList.size() - 1; i++) {
                for (int j = i + 1; j < userList.size(); j++) {
                    Match match = new Match();
                    match.setSeasonId(seasonId);
                    match.setHomeUser(userList.get(i));
                    match.setAwayUser(userList.get(j));
                    match.setFinish(false);
                    match.setHomeScore(0);
                    match.setAwayScore(0);
                    matchRepository.save(match);
                }
            }

        } else {
        }
        ModelAndView modelAndView = new ModelAndView("redirect:/season");
        return modelAndView;
    }

    private int calMathNum(int size) {
        if (size == 3) {
            return 3;
        }
        if (size == 4) {
            return 6;
        }
        return 1;
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Season> getAllSeason() {
        // This returns a JSON or XML with the users
        return seasonRepository.findAll();
    }

    @GetMapping(path = "/result")
    public String rank(@RequestParam Integer seasonId, Model model) {
        List<UserScore> userScores = rankSeason(seasonId);
        model.addAttribute("userScores", userScores);
        return "season/rank";
    }

    private List<UserScore> rankSeason(Integer seasonId) {
        Iterable<Match> matches = matchRepository.findAllBySeasonId(seasonId);
        Iterable<User> users = userRepository.findAll();
        Map<User, UserScore> userScoreMap = new HashMap<>();
        for (User user : users) {
            UserScore userScore = new UserScore();
            userScore.setUserId(user.getId());
            userScore.setUsername(user.getUsername());
            userScoreMap.put(user, userScore);
        }

        for (Match match : matches) {
            UserScore homeScore = userScoreMap.get(match.getHomeUser());
            UserScore awayScore = userScoreMap.get(match.getAwayUser());
            if (match.getHomeScore() > match.getAwayScore()) {
                homeScore.setPoints(homeScore.getPoints() + 3);
            } else if (match.getHomeScore() == match.getAwayScore()) {
                homeScore.setPoints(homeScore.getPoints() + 1);
                awayScore.setPoints(awayScore.getPoints() + 1);
            } else {
                awayScore.setPoints(awayScore.getPoints() + 3);
            }
            int goalDiff = match.getHomeScore() - match.getAwayScore();
            homeScore.setGoals(homeScore.getGoals() + match.getHomeScore());
            homeScore.setGoalDifferential(homeScore.getGoalDifferential() + goalDiff);
            awayScore.setGoals(awayScore.getGoals() + match.getAwayScore());
            awayScore.setGoalDifferential(awayScore.getGoalDifferential() - goalDiff);
        }
        List<UserScore> userScores = userScoreMap.
                entrySet().
                stream().
                map(userScoreMaps -> userScoreMaps.getValue())
                .sorted(Comparator.comparing(UserScore::getPoints)
                        .thenComparing(UserScore::getGoalDifferential)
                        .thenComparing(UserScore::getGoals))
                .collect(Collectors.toList());
        Collections.reverse(userScores);
        return userScores;
    }

    @GetMapping(path = "/top1")
    public @ResponseBody
    Integer top1(@RequestParam Integer seasonId) {
        return rankSeason(seasonId).get(0).getUserId();
    }

    @GetMapping(path = "")
    public String index(Model model) {
        Iterable<Season> seasons = seasonRepository.findAll();
        List<Season> seasonList = new ArrayList<>();
        seasons.forEach(season -> {
            seasonList.add(season);
        });
        model.addAttribute("seasons", seasonList);
        return "season/index";
    }

    @GetMapping(path = "match")
    public String modify(@RequestParam Integer seasonId, Model model) {
        Iterable<Match> matches = matchRepository.findAllBySeasonId(seasonId);
        List<Match> matchList = new ArrayList<>();
        matches.forEach(match -> {
            matchList.add(match);
        });
        model.addAttribute("matches", matchList);

        return "season/match";
    }
}